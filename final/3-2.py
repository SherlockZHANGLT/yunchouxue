import gurobipy as gb
from gurobipy import GRB
import numpy as np
xinrate=np.load('xinrate.npy')
baselen=np.load('baselen.npy')  #   8*8地方距离
dlist_train=np.load('dlist_train.npy')  #   20*8*8*7出行需求
IDL=np.load('IDL.npy')  #   8*8行驶时间
xinlist_train=np.load('xinlist_train.npy') *xinrate #   20*8初始车辆分布

dlist_test=np.load('dlist_test.npy')  # 10*8*8*7测试出行需求
xinlist_test=np.load('xinlist_test.npy') *xinrate # 10*8测试初始车辆分布

for i in range(20):
    for j in range(8):
        xinlist_train[i][j]=round(xinlist_train[i][j])
for i in range(10):
    for j in range(8):
        xinlist_test[i][j]=round(xinlist_test[i][j])

dis_income=2.28 #距离单价
time_income=0.63    #时段单价
empty_cost=0.70 #调度距离单价

#dlist=dlist_train[m]    #出行需求 8*8*7
#xinlist=xinlist_train[m]    #初始分布 8

sum=0

sum_train=[]
sum_test=[]
for i in range(20):
    sum_train.append(np.sum(xinlist_train[i]))
for i in range(10):
    sum_test.append(np.sum(xinlist_test[i]))

a_p=[]
b0_p=[]
b1_p=[]
b2_p=[]
b3_p=[]
b4_p=[]
b5_p=[]
t0_p=[]
t1_p=[]
t2_p=[]
t3_p=[]
t4_p=[]
t5_p=[]
s_p=[]

# Model formulation
m = gb.Model('train')
A0 = m.addVars(64*20, lb=0, vtype=GRB.CONTINUOUS, name='A0')  #时段1的运载数
A1 = m.addVars(64*20, lb=0, vtype=GRB.CONTINUOUS, name='A1')
A2 = m.addVars(64*20, lb=0, vtype=GRB.CONTINUOUS, name='A2')
A3 = m.addVars(64*20, lb=0, vtype=GRB.CONTINUOUS, name='A3')
A4 = m.addVars(64*20, lb=0, vtype=GRB.CONTINUOUS, name='A4')
A5 = m.addVars(64*20, lb=0, vtype=GRB.CONTINUOUS, name='A5')

B0 = m.addVars(64*20, lb=0, vtype=GRB.CONTINUOUS, name='B0')  #时段1的运载数
B1 = m.addVars(64*20, lb=0, vtype=GRB.CONTINUOUS, name='B1')
B2 = m.addVars(64*20, lb=0, vtype=GRB.CONTINUOUS, name='B2')
B3 = m.addVars(64*20, lb=0, vtype=GRB.CONTINUOUS, name='B3')
B4 = m.addVars(64*20, lb=0, vtype=GRB.CONTINUOUS, name='B4')
B5 = m.addVars(64*20, lb=0, vtype=GRB.CONTINUOUS, name='B5')

a = m.addVars(64,  vtype=GRB.CONTINUOUS, name='a')  

b0 = m.addVars(64,  vtype=GRB.CONTINUOUS, name='b0')  
b1 = m.addVars(64,  vtype=GRB.CONTINUOUS, name='b1')
b2 = m.addVars(64,  vtype=GRB.CONTINUOUS, name='b2')
b3 = m.addVars(64,  vtype=GRB.CONTINUOUS, name='b3')
b4 = m.addVars(64,  vtype=GRB.CONTINUOUS, name='b4')
b5 = m.addVars(64,  vtype=GRB.CONTINUOUS, name='b5')

t0 = m.addVars(64,  vtype=GRB.CONTINUOUS, name='t0')  
t1 = m.addVars(64,  vtype=GRB.CONTINUOUS, name='t1')
t2 = m.addVars(64,  vtype=GRB.CONTINUOUS, name='t2')
t3 = m.addVars(64,  vtype=GRB.CONTINUOUS, name='t3')
t4 = m.addVars(64,  vtype=GRB.CONTINUOUS, name='t4')
t5 = m.addVars(64,  vtype=GRB.CONTINUOUS, name='t5')

#s = m.addVars(64, vtype=GRB.CONTINUOUS, name='s')

#决策约束
m.addConstrs((B0[i] == a[i%64]+b0[i%64]*dlist_train[i//64][(i%64)//8][i%8][0]-t0[i%64]*dlist_train[i//64][i%8][(i%64)//8][0] for i in range(64*20)), 'c1')#+s[i%64]*(sum_train[i//64]-xinlist_train[i//64][(i%64)//8])
m.addConstrs((B1[i] == a[i%64]+b1[i%64]*dlist_train[i//64][(i%64)//8][i%8][1]-t1[i%64]*dlist_train[i//64][i%8][(i%64)//8][1] for i in range(64*20)), 'c2')
m.addConstrs((B2[i] == a[i%64]+b2[i%64]*dlist_train[i//64][(i%64)//8][i%8][2]-t2[i%64]*dlist_train[i//64][i%8][(i%64)//8][2] for i in range(64*20)), 'c3')
m.addConstrs((B3[i] == a[i%64]+b3[i%64]*dlist_train[i//64][(i%64)//8][i%8][3]-t3[i%64]*dlist_train[i//64][i%8][(i%64)//8][3] for i in range(64*20)), 'c4')
m.addConstrs((B4[i] == a[i%64]+b4[i%64]*dlist_train[i//64][(i%64)//8][i%8][4]-t4[i%64]*dlist_train[i//64][i%8][(i%64)//8][4] for i in range(64*20)), 'c5')
m.addConstrs((B5[i] == a[i%64]+b5[i%64]*dlist_train[i//64][(i%64)//8][i%8][5]-t5[i%64]*dlist_train[i//64][i%8][(i%64)//8][5] for i in range(64*20)), 'c6')

#运载数小于需求量
m.addConstrs((A0[i] <= dlist_train[i//64][(i%64)//8][i%8][1] for i in range(64*20)), 'cc1')
m.addConstrs((A1[i] <= dlist_train[i//64][(i%64)//8][i%8][2] for i in range(64*20)), 'cc2')
m.addConstrs((A2[i] <= dlist_train[i//64][(i%64)//8][i%8][3] for i in range(64*20)), 'cc3')
m.addConstrs((A3[i] <= dlist_train[i//64][(i%64)//8][i%8][4] for i in range(64*20)), 'cc4')
m.addConstrs((A4[i] <= dlist_train[i//64][(i%64)//8][i%8][5] for i in range(64*20)), 'cc5')
m.addConstrs((A5[i] <= dlist_train[i//64][(i%64)//8][i%8][6] for i in range(64*20)), 'cc6')
    

#拒绝自我调度
m.addConstrs((A0[(i%8)*8+(i%8)+64*(i//8)] == 0 for i in range(8*20)), 'd1')
m.addConstrs((A1[(i%8)*8+(i%8)+64*(i//8)] == 0 for i in range(8*20)), 'd2')
m.addConstrs((A2[(i%8)*8+(i%8)+64*(i//8)] == 0 for i in range(8*20)), 'd3')
m.addConstrs((A3[(i%8)*8+(i%8)+64*(i//8)] == 0 for i in range(8*20)), 'd4')
m.addConstrs((A4[(i%8)*8+(i%8)+64*(i//8)] == 0 for i in range(8*20)), 'd5')
m.addConstrs((A5[(i%8)*8+(i%8)+64*(i//8)] == 0 for i in range(8*20)), 'd6')
m.addConstrs((B0[(i%8)*8+(i%8)+64*(i//8)] == 0 for i in range(8*20)), 'd7')
m.addConstrs((B1[(i%8)*8+(i%8)+64*(i//8)] == 0 for i in range(8*20)), 'd8')
m.addConstrs((B2[(i%8)*8+(i%8)+64*(i//8)] == 0 for i in range(8*20)), 'd9')
m.addConstrs((B3[(i%8)*8+(i%8)+64*(i//8)] == 0 for i in range(8*20)), 'd10')
m.addConstrs((B4[(i%8)*8+(i%8)+64*(i//8)] == 0 for i in range(8*20)), 'd11')
m.addConstrs((B5[(i%8)*8+(i%8)+64*(i//8)] == 0 for i in range(8*20)), 'd12')

#车辆数目限制
m.addConstrs((A0[(i%8)*8+64*(i//8)]+A0[(i%8)*8+64*(i//8)+1]+A0[(i%8)*8+64*(i//8)+2]+A0[(i%8)*8+64*(i//8)+3]+A0[(i%8)*8+64*(i//8)+4]+A0[(i%8)*8+64*(i//8)+5]+A0[(i%8)*8+64*(i//8)+6]+A0[(i%8)*8+64*(i//8)+7]+B0[(i%8)*8+64*(i//8)]+B0[(i%8)*8+64*(i//8)+1]+B0[(i%8)*8+64*(i//8)+2]+B0[(i%8)*8+64*(i//8)+3]+B0[(i%8)*8+64*(i//8)+4]+B0[(i%8)*8+64*(i//8)+5]+B0[(i%8)*8+64*(i//8)+6]+B0[(i%8)*8+64*(i//8)+7] \
    <= xinlist_train[i//8][i%8] for i in range(8*20)), 'e0')

m.addConstrs((A1[(i%8)*8+64*(i//8)]+A1[(i%8)*8+64*(i//8)+1]+A1[(i%8)*8+64*(i//8)+2]+A1[(i%8)*8+64*(i//8)+3]+A1[(i%8)*8+64*(i//8)+4]+A1[(i%8)*8+64*(i//8)+5]+A1[(i%8)*8+64*(i//8)+6]+A1[(i%8)*8+64*(i//8)+7]+B1[(i%8)*8+64*(i//8)]+B1[(i%8)*8+64*(i//8)+1]+B1[(i%8)*8+64*(i//8)+2]+B1[(i%8)*8+64*(i//8)+3]+B1[(i%8)*8+64*(i//8)+4]+B1[(i%8)*8+64*(i//8)+5]+B1[(i%8)*8+64*(i//8)+6]+B1[(i%8)*8+64*(i//8)+7] \
    <= xinlist_train[i//8][i%8]-(A0[(i%8)*8+64*(i//8)]+A0[(i%8)*8+64*(i//8)+1]+A0[(i%8)*8+64*(i//8)+2]+A0[(i%8)*8+64*(i//8)+3]+A0[(i%8)*8+64*(i//8)+4]+A0[(i%8)*8+64*(i//8)+5]+A0[(i%8)*8+64*(i//8)+6]+A0[(i%8)*8+64*(i//8)+7]+B0[(i%8)*8+64*(i//8)]+B0[(i%8)*8+64*(i//8)+1]+B0[(i%8)*8+64*(i//8)+2]+B0[(i%8)*8+64*(i//8)+3]+B0[(i%8)*8+64*(i//8)+4]+B0[(i%8)*8+64*(i//8)+5]+B0[(i%8)*8+64*(i//8)+6]+B0[(i%8)*8+64*(i//8)+7])\
        +(A0[(i%8)+64*(i//8)]+A0[8+(i%8)+64*(i//8)]+A0[16+(i%8)+64*(i//8)]+A0[24+(i%8)+64*(i//8)]+A0[32+(i%8)+64*(i//8)]+A0[40+(i%8)+64*(i//8)]+A0[48+(i%8)+64*(i//8)]+A0[56+(i%8)+64*(i//8)]+B0[i]+B0[8+(i%8)+64*(i//8)]+B0[16+(i%8)+64*(i//8)]+B0[24+(i%8)+64*(i//8)]+B0[32+(i%8)+64*(i//8)]+B0[40+(i%8)+64*(i//8)]+B0[48+(i%8)+64*(i//8)]+B0[56+(i%8)+64*(i//8)]) for i in range(8*20)), 'e1')

m.addConstrs((A2[(i%8)*8+64*(i//8)]+A2[(i%8)*8+64*(i//8)+1]+A2[(i%8)*8+64*(i//8)+2]+A2[(i%8)*8+64*(i//8)+3]+A2[(i%8)*8+64*(i//8)+4]+A2[(i%8)*8+64*(i//8)+5]+A2[(i%8)*8+64*(i//8)+6]+A2[(i%8)*8+64*(i//8)+7]+B2[(i%8)*8+64*(i//8)]+B2[(i%8)*8+64*(i//8)+1]+B2[(i%8)*8+64*(i//8)+2]+B2[(i%8)*8+64*(i//8)+3]+B2[(i%8)*8+64*(i//8)+4]+B2[(i%8)*8+64*(i//8)+5]+B2[(i%8)*8+64*(i//8)+6]+B2[(i%8)*8+64*(i//8)+7] \
    <= xinlist_train[i//8][i%8]-(A0[(i%8)*8+64*(i//8)]+A0[(i%8)*8+64*(i//8)+1]+A0[(i%8)*8+64*(i//8)+2]+A0[(i%8)*8+64*(i//8)+3]+A0[(i%8)*8+64*(i//8)+4]+A0[(i%8)*8+64*(i//8)+5]+A0[(i%8)*8+64*(i//8)+6]+A0[(i%8)*8+64*(i//8)+7]+B0[(i%8)*8+64*(i//8)]+B0[(i%8)*8+64*(i//8)+1]+B0[(i%8)*8+64*(i//8)+2]+B0[(i%8)*8+64*(i//8)+3]+B0[(i%8)*8+64*(i//8)+4]+B0[(i%8)*8+64*(i//8)+5]+B0[(i%8)*8+64*(i//8)+6]+B0[(i%8)*8+64*(i//8)+7])+\
        (A0[(i%8)+64*(i//8)]+A0[8+(i%8)+64*(i//8)]+A0[16+(i%8)+64*(i//8)]+A0[24+(i%8)+64*(i//8)]+A0[32+(i%8)+64*(i//8)]+A0[40+(i%8)+64*(i//8)]+A0[48+(i%8)+64*(i//8)]+A0[56+(i%8)+64*(i//8)]+B0[i]+B0[8+(i%8)+64*(i//8)]+B0[16+(i%8)+64*(i//8)]+B0[24+(i%8)+64*(i//8)]+B0[32+(i%8)+64*(i//8)]+B0[40+(i%8)+64*(i//8)]+B0[48+(i%8)+64*(i//8)]+B0[56+(i%8)+64*(i//8)])-\
            (A1[(i%8)*8+64*(i//8)]+A1[(i%8)*8+64*(i//8)+1]+A1[(i%8)*8+64*(i//8)+2]+A1[(i%8)*8+64*(i//8)+3]+A1[(i%8)*8+64*(i//8)+4]+A1[(i%8)*8+64*(i//8)+5]+A1[(i%8)*8+64*(i//8)+6]+A1[(i%8)*8+64*(i//8)+7]+B1[(i%8)*8+64*(i//8)]+B1[(i%8)*8+64*(i//8)+1]+B1[(i%8)*8+64*(i//8)+2]+B1[(i%8)*8+64*(i//8)+3]+B1[(i%8)*8+64*(i//8)+4]+B1[(i%8)*8+64*(i//8)+5]+B1[(i%8)*8+64*(i//8)+6]+B1[(i%8)*8+64*(i//8)+7])+\
                (A1[(i%8)+64*(i//8)]+A1[8+(i%8)+64*(i//8)]+A1[16+(i%8)+64*(i//8)]+A1[24+(i%8)+64*(i//8)]+A1[32+(i%8)+64*(i//8)]+A1[40+(i%8)+64*(i//8)]+A1[48+(i%8)+64*(i//8)]+A1[56+(i%8)+64*(i//8)]+B1[i]+B1[8+(i%8)+64*(i//8)]+B1[16+(i%8)+64*(i//8)]+B1[24+(i%8)+64*(i//8)]+B1[32+(i%8)+64*(i//8)]+B1[40+(i%8)+64*(i//8)]+B1[48+(i%8)+64*(i//8)]+B1[56+(i%8)+64*(i//8)]) for i in range(8*20)), 'e2')

m.addConstrs((A3[(i%8)*8+64*(i//8)]+A3[(i%8)*8+64*(i//8)+1]+A3[(i%8)*8+64*(i//8)+2]+A3[(i%8)*8+64*(i//8)+3]+A3[(i%8)*8+64*(i//8)+4]+A3[(i%8)*8+64*(i//8)+5]+A3[(i%8)*8+64*(i//8)+6]+A3[(i%8)*8+64*(i//8)+7]+B3[(i%8)*8+64*(i//8)]+B3[(i%8)*8+64*(i//8)+1]+B3[(i%8)*8+64*(i//8)+2]+B3[(i%8)*8+64*(i//8)+3]+B3[(i%8)*8+64*(i//8)+4]+B3[(i%8)*8+64*(i//8)+5]+B3[(i%8)*8+64*(i//8)+6]+B3[(i%8)*8+64*(i//8)+7] \
    <= xinlist_train[i//8][i%8]-(A0[(i%8)*8+64*(i//8)]+A0[(i%8)*8+64*(i//8)+1]+A0[(i%8)*8+64*(i//8)+2]+A0[(i%8)*8+64*(i//8)+3]+A0[(i%8)*8+64*(i//8)+4]+A0[(i%8)*8+64*(i//8)+5]+A0[(i%8)*8+64*(i//8)+6]+A0[(i%8)*8+64*(i//8)+7]+B0[(i%8)*8+64*(i//8)]+B0[(i%8)*8+64*(i//8)+1]+B0[(i%8)*8+64*(i//8)+2]+B0[(i%8)*8+64*(i//8)+3]+B0[(i%8)*8+64*(i//8)+4]+B0[(i%8)*8+64*(i//8)+5]+B0[(i%8)*8+64*(i//8)+6]+B0[(i%8)*8+64*(i//8)+7])+\
        (A0[(i%8)+64*(i//8)]+A0[8+(i%8)+64*(i//8)]+A0[16+(i%8)+64*(i//8)]+A0[24+(i%8)+64*(i//8)]+A0[32+(i%8)+64*(i//8)]+A0[40+(i%8)+64*(i//8)]+A0[48+(i%8)+64*(i//8)]+A0[56+(i%8)+64*(i//8)]+B0[i]+B0[8+(i%8)+64*(i//8)]+B0[16+(i%8)+64*(i//8)]+B0[24+(i%8)+64*(i//8)]+B0[32+(i%8)+64*(i//8)]+B0[40+(i%8)+64*(i//8)]+B0[48+(i%8)+64*(i//8)]+B0[56+(i%8)+64*(i//8)])-\
            (A1[(i%8)*8+64*(i//8)]+A1[(i%8)*8+64*(i//8)+1]+A1[(i%8)*8+64*(i//8)+2]+A1[(i%8)*8+64*(i//8)+3]+A1[(i%8)*8+64*(i//8)+4]+A1[(i%8)*8+64*(i//8)+5]+A1[(i%8)*8+64*(i//8)+6]+A1[(i%8)*8+64*(i//8)+7]+B1[(i%8)*8+64*(i//8)]+B1[(i%8)*8+64*(i//8)+1]+B1[(i%8)*8+64*(i//8)+2]+B1[(i%8)*8+64*(i//8)+3]+B1[(i%8)*8+64*(i//8)+4]+B1[(i%8)*8+64*(i//8)+5]+B1[(i%8)*8+64*(i//8)+6]+B1[(i%8)*8+64*(i//8)+7])+\
                (A1[(i%8)+64*(i//8)]+A1[8+(i%8)+64*(i//8)]+A1[16+(i%8)+64*(i//8)]+A1[24+(i%8)+64*(i//8)]+A1[32+(i%8)+64*(i//8)]+A1[40+(i%8)+64*(i//8)]+A1[48+(i%8)+64*(i//8)]+A1[56+(i%8)+64*(i//8)]+B1[i]+B1[8+(i%8)+64*(i//8)]+B1[16+(i%8)+64*(i//8)]+B1[24+(i%8)+64*(i//8)]+B1[32+(i%8)+64*(i//8)]+B1[40+(i%8)+64*(i//8)]+B1[48+(i%8)+64*(i//8)]+B1[56+(i%8)+64*(i//8)])-\
                    (A2[(i%8)*8+64*(i//8)]+A2[(i%8)*8+64*(i//8)+1]+A2[(i%8)*8+64*(i//8)+2]+A2[(i%8)*8+64*(i//8)+3]+A2[(i%8)*8+64*(i//8)+4]+A2[(i%8)*8+64*(i//8)+5]+A2[(i%8)*8+64*(i//8)+6]+A2[(i%8)*8+64*(i//8)+7]+B2[(i%8)*8+64*(i//8)]+B2[(i%8)*8+64*(i//8)+1]+B2[(i%8)*8+64*(i//8)+2]+B2[(i%8)*8+64*(i//8)+3]+B2[(i%8)*8+64*(i//8)+4]+B2[(i%8)*8+64*(i//8)+5]+B2[(i%8)*8+64*(i//8)+6]+B2[(i%8)*8+64*(i//8)+7])+\
                        (A2[(i%8)+64*(i//8)]+A2[8+(i%8)+64*(i//8)]+A2[16+(i%8)+64*(i//8)]+A2[24+(i%8)+64*(i//8)]+A2[32+(i%8)+64*(i//8)]+A2[40+(i%8)+64*(i//8)]+A2[48+(i%8)+64*(i//8)]+A2[56+(i%8)+64*(i//8)]+B2[i]+B2[8+(i%8)+64*(i//8)]+B2[16+(i%8)+64*(i//8)]+B2[24+(i%8)+64*(i//8)]+B2[32+(i%8)+64*(i//8)]+B2[40+(i%8)+64*(i//8)]+B2[48+(i%8)+64*(i//8)]+B2[56+(i%8)+64*(i//8)]) for i in range(8*20)), 'e3')

m.addConstrs((A4[(i%8)*8+64*(i//8)]+A4[(i%8)*8+64*(i//8)+1]+A4[(i%8)*8+64*(i//8)+2]+A4[(i%8)*8+64*(i//8)+3]+A4[(i%8)*8+64*(i//8)+4]+A4[(i%8)*8+64*(i//8)+5]+A4[(i%8)*8+64*(i//8)+6]+A4[(i%8)*8+64*(i//8)+7]+B4[(i%8)*8+64*(i//8)]+B4[(i%8)*8+64*(i//8)+1]+B4[(i%8)*8+64*(i//8)+2]+B4[(i%8)*8+64*(i//8)+3]+B4[(i%8)*8+64*(i//8)+4]+B4[(i%8)*8+64*(i//8)+5]+B4[(i%8)*8+64*(i//8)+6]+B4[(i%8)*8+64*(i//8)+7] \
    <= xinlist_train[i//8][i%8]-(A0[(i%8)*8+64*(i//8)]+A0[(i%8)*8+64*(i//8)+1]+A0[(i%8)*8+64*(i//8)+2]+A0[(i%8)*8+64*(i//8)+3]+A0[(i%8)*8+64*(i//8)+4]+A0[(i%8)*8+64*(i//8)+5]+A0[(i%8)*8+64*(i//8)+6]+A0[(i%8)*8+64*(i//8)+7]+B0[(i%8)*8+64*(i//8)]+B0[(i%8)*8+64*(i//8)+1]+B0[(i%8)*8+64*(i//8)+2]+B0[(i%8)*8+64*(i//8)+3]+B0[(i%8)*8+64*(i//8)+4]+B0[(i%8)*8+64*(i//8)+5]+B0[(i%8)*8+64*(i//8)+6]+B0[(i%8)*8+64*(i//8)+7])+\
        (A0[(i%8)+64*(i//8)]+A0[8+(i%8)+64*(i//8)]+A0[16+(i%8)+64*(i//8)]+A0[24+(i%8)+64*(i//8)]+A0[32+(i%8)+64*(i//8)]+A0[40+(i%8)+64*(i//8)]+A0[48+(i%8)+64*(i//8)]+A0[56+(i%8)+64*(i//8)]+B0[i]+B0[8+(i%8)+64*(i//8)]+B0[16+(i%8)+64*(i//8)]+B0[24+(i%8)+64*(i//8)]+B0[32+(i%8)+64*(i//8)]+B0[40+(i%8)+64*(i//8)]+B0[48+(i%8)+64*(i//8)]+B0[56+(i%8)+64*(i//8)])-\
            (A1[(i%8)*8+64*(i//8)]+A1[(i%8)*8+64*(i//8)+1]+A1[(i%8)*8+64*(i//8)+2]+A1[(i%8)*8+64*(i//8)+3]+A1[(i%8)*8+64*(i//8)+4]+A1[(i%8)*8+64*(i//8)+5]+A1[(i%8)*8+64*(i//8)+6]+A1[(i%8)*8+64*(i//8)+7]+B1[(i%8)*8+64*(i//8)]+B1[(i%8)*8+64*(i//8)+1]+B1[(i%8)*8+64*(i//8)+2]+B1[(i%8)*8+64*(i//8)+3]+B1[(i%8)*8+64*(i//8)+4]+B1[(i%8)*8+64*(i//8)+5]+B1[(i%8)*8+64*(i//8)+6]+B1[(i%8)*8+64*(i//8)+7])+\
                (A1[(i%8)+64*(i//8)]+A1[8+(i%8)+64*(i//8)]+A1[16+(i%8)+64*(i//8)]+A1[24+(i%8)+64*(i//8)]+A1[32+(i%8)+64*(i//8)]+A1[40+(i%8)+64*(i//8)]+A1[48+(i%8)+64*(i//8)]+A1[56+(i%8)+64*(i//8)]+B1[i]+B1[8+(i%8)+64*(i//8)]+B1[16+(i%8)+64*(i//8)]+B1[24+(i%8)+64*(i//8)]+B1[32+(i%8)+64*(i//8)]+B1[40+(i%8)+64*(i//8)]+B1[48+(i%8)+64*(i//8)]+B1[56+(i%8)+64*(i//8)])-\
                    (A2[(i%8)*8+64*(i//8)]+A2[(i%8)*8+64*(i//8)+1]+A2[(i%8)*8+64*(i//8)+2]+A2[(i%8)*8+64*(i//8)+3]+A2[(i%8)*8+64*(i//8)+4]+A2[(i%8)*8+64*(i//8)+5]+A2[(i%8)*8+64*(i//8)+6]+A2[(i%8)*8+64*(i//8)+7]+B2[(i%8)*8+64*(i//8)]+B2[(i%8)*8+64*(i//8)+1]+B2[(i%8)*8+64*(i//8)+2]+B2[(i%8)*8+64*(i//8)+3]+B2[(i%8)*8+64*(i//8)+4]+B2[(i%8)*8+64*(i//8)+5]+B2[(i%8)*8+64*(i//8)+6]+B2[(i%8)*8+64*(i//8)+7])+\
                        (A2[(i%8)+64*(i//8)]+A2[8+(i%8)+64*(i//8)]+A2[16+(i%8)+64*(i//8)]+A2[24+(i%8)+64*(i//8)]+A2[32+(i%8)+64*(i//8)]+A2[40+(i%8)+64*(i//8)]+A2[48+(i%8)+64*(i//8)]+A2[56+(i%8)+64*(i//8)]+B2[i]+B2[8+(i%8)+64*(i//8)]+B2[16+(i%8)+64*(i//8)]+B2[24+(i%8)+64*(i//8)]+B2[32+(i%8)+64*(i//8)]+B2[40+(i%8)+64*(i//8)]+B2[48+(i%8)+64*(i//8)]+B2[56+(i%8)+64*(i//8)])-\
                            (A3[(i%8)*8+64*(i//8)]+A3[(i%8)*8+64*(i//8)+1]+A3[(i%8)*8+64*(i//8)+2]+A3[(i%8)*8+64*(i//8)+3]+A3[(i%8)*8+64*(i//8)+4]+A3[(i%8)*8+64*(i//8)+5]+A3[(i%8)*8+64*(i//8)+6]+A3[(i%8)*8+64*(i//8)+7]+B3[(i%8)*8+64*(i//8)]+B3[(i%8)*8+64*(i//8)+1]+B3[(i%8)*8+64*(i//8)+2]+B3[(i%8)*8+64*(i//8)+3]+B3[(i%8)*8+64*(i//8)+4]+B3[(i%8)*8+64*(i//8)+5]+B3[(i%8)*8+64*(i//8)+6]+B3[(i%8)*8+64*(i//8)+7])+\
                                (A3[(i%8)+64*(i//8)]+A3[8+(i%8)+64*(i//8)]+A3[16+(i%8)+64*(i//8)]+A3[24+(i%8)+64*(i//8)]+A3[32+(i%8)+64*(i//8)]+A3[40+(i%8)+64*(i//8)]+A3[48+(i%8)+64*(i//8)]+A3[56+(i%8)+64*(i//8)]+B3[i]+B3[8+(i%8)+64*(i//8)]+B3[16+(i%8)+64*(i//8)]+B3[24+(i%8)+64*(i//8)]+B3[32+(i%8)+64*(i//8)]+B3[40+(i%8)+64*(i//8)]+B3[48+(i%8)+64*(i//8)]+B3[56+(i%8)+64*(i//8)]) for i in range(8*20)), 'e4')

m.addConstrs((A5[(i%8)*8+64*(i//8)]+A5[(i%8)*8+64*(i//8)+1]+A5[(i%8)*8+64*(i//8)+2]+A5[(i%8)*8+64*(i//8)+3]+A5[(i%8)*8+64*(i//8)+4]+A5[(i%8)*8+64*(i//8)+5]+A5[(i%8)*8+64*(i//8)+6]+A5[(i%8)*8+64*(i//8)+7]+B5[(i%8)*8+64*(i//8)]+B5[(i%8)*8+64*(i//8)+1]+B5[(i%8)*8+64*(i//8)+2]+B5[(i%8)*8+64*(i//8)+3]+B5[(i%8)*8+64*(i//8)+4]+B5[(i%8)*8+64*(i//8)+5]+B5[(i%8)*8+64*(i//8)+6]+B5[(i%8)*8+64*(i//8)+7] \
    <= xinlist_train[i//8][i%8]-(A0[(i%8)*8+64*(i//8)]+A0[(i%8)*8+64*(i//8)+1]+A0[(i%8)*8+64*(i//8)+2]+A0[(i%8)*8+64*(i//8)+3]+A0[(i%8)*8+64*(i//8)+4]+A0[(i%8)*8+64*(i//8)+5]+A0[(i%8)*8+64*(i//8)+6]+A0[(i%8)*8+64*(i//8)+7]+B0[(i%8)*8+64*(i//8)]+B0[(i%8)*8+64*(i//8)+1]+B0[(i%8)*8+64*(i//8)+2]+B0[(i%8)*8+64*(i//8)+3]+B0[(i%8)*8+64*(i//8)+4]+B0[(i%8)*8+64*(i//8)+5]+B0[(i%8)*8+64*(i//8)+6]+B0[(i%8)*8+64*(i//8)+7])+\
        (A0[(i%8)+64*(i//8)]+A0[8+(i%8)+64*(i//8)]+A0[16+(i%8)+64*(i//8)]+A0[24+(i%8)+64*(i//8)]+A0[32+(i%8)+64*(i//8)]+A0[40+(i%8)+64*(i//8)]+A0[48+(i%8)+64*(i//8)]+A0[56+(i%8)+64*(i//8)]+B0[i]+B0[8+(i%8)+64*(i//8)]+B0[16+(i%8)+64*(i//8)]+B0[24+(i%8)+64*(i//8)]+B0[32+(i%8)+64*(i//8)]+B0[40+(i%8)+64*(i//8)]+B0[48+(i%8)+64*(i//8)]+B0[56+(i%8)+64*(i//8)])-\
            (A1[(i%8)*8+64*(i//8)]+A1[(i%8)*8+64*(i//8)+1]+A1[(i%8)*8+64*(i//8)+2]+A1[(i%8)*8+64*(i//8)+3]+A1[(i%8)*8+64*(i//8)+4]+A1[(i%8)*8+64*(i//8)+5]+A1[(i%8)*8+64*(i//8)+6]+A1[(i%8)*8+64*(i//8)+7]+B1[(i%8)*8+64*(i//8)]+B1[(i%8)*8+64*(i//8)+1]+B1[(i%8)*8+64*(i//8)+2]+B1[(i%8)*8+64*(i//8)+3]+B1[(i%8)*8+64*(i//8)+4]+B1[(i%8)*8+64*(i//8)+5]+B1[(i%8)*8+64*(i//8)+6]+B1[(i%8)*8+64*(i//8)+7])+\
                (A1[(i%8)+64*(i//8)]+A1[8+(i%8)+64*(i//8)]+A1[16+(i%8)+64*(i//8)]+A1[24+(i%8)+64*(i//8)]+A1[32+(i%8)+64*(i//8)]+A1[40+(i%8)+64*(i//8)]+A1[48+(i%8)+64*(i//8)]+A1[56+(i%8)+64*(i//8)]+B1[i]+B1[8+(i%8)+64*(i//8)]+B1[16+(i%8)+64*(i//8)]+B1[24+(i%8)+64*(i//8)]+B1[32+(i%8)+64*(i//8)]+B1[40+(i%8)+64*(i//8)]+B1[48+(i%8)+64*(i//8)]+B1[56+(i%8)+64*(i//8)])-\
                    (A2[(i%8)*8+64*(i//8)]+A2[(i%8)*8+64*(i//8)+1]+A2[(i%8)*8+64*(i//8)+2]+A2[(i%8)*8+64*(i//8)+3]+A2[(i%8)*8+64*(i//8)+4]+A2[(i%8)*8+64*(i//8)+5]+A2[(i%8)*8+64*(i//8)+6]+A2[(i%8)*8+64*(i//8)+7]+B2[(i%8)*8+64*(i//8)]+B2[(i%8)*8+64*(i//8)+1]+B2[(i%8)*8+64*(i//8)+2]+B2[(i%8)*8+64*(i//8)+3]+B2[(i%8)*8+64*(i//8)+4]+B2[(i%8)*8+64*(i//8)+5]+B2[(i%8)*8+64*(i//8)+6]+B2[(i%8)*8+64*(i//8)+7])+\
                        (A2[(i%8)+64*(i//8)]+A2[8+(i%8)+64*(i//8)]+A2[16+(i%8)+64*(i//8)]+A2[24+(i%8)+64*(i//8)]+A2[32+(i%8)+64*(i//8)]+A2[40+(i%8)+64*(i//8)]+A2[48+(i%8)+64*(i//8)]+A2[56+(i%8)+64*(i//8)]+B2[i]+B2[8+(i%8)+64*(i//8)]+B2[16+(i%8)+64*(i//8)]+B2[24+(i%8)+64*(i//8)]+B2[32+(i%8)+64*(i//8)]+B2[40+(i%8)+64*(i//8)]+B2[48+(i%8)+64*(i//8)]+B2[56+(i%8)+64*(i//8)])-\
                            (A3[(i%8)*8+64*(i//8)]+A3[(i%8)*8+64*(i//8)+1]+A3[(i%8)*8+64*(i//8)+2]+A3[(i%8)*8+64*(i//8)+3]+A3[(i%8)*8+64*(i//8)+4]+A3[(i%8)*8+64*(i//8)+5]+A3[(i%8)*8+64*(i//8)+6]+A3[(i%8)*8+64*(i//8)+7]+B3[(i%8)*8+64*(i//8)]+B3[(i%8)*8+64*(i//8)+1]+B3[(i%8)*8+64*(i//8)+2]+B3[(i%8)*8+64*(i//8)+3]+B3[(i%8)*8+64*(i//8)+4]+B3[(i%8)*8+64*(i//8)+5]+B3[(i%8)*8+64*(i//8)+6]+B3[(i%8)*8+64*(i//8)+7])+\
                                (A3[(i%8)+64*(i//8)]+A3[8+(i%8)+64*(i//8)]+A3[16+(i%8)+64*(i//8)]+A3[24+(i%8)+64*(i//8)]+A3[32+(i%8)+64*(i//8)]+A3[40+(i%8)+64*(i//8)]+A3[48+(i%8)+64*(i//8)]+A3[56+(i%8)+64*(i//8)]+B3[i]+B3[8+(i%8)+64*(i//8)]+B3[16+(i%8)+64*(i//8)]+B3[24+(i%8)+64*(i//8)]+B3[32+(i%8)+64*(i//8)]+B3[40+(i%8)+64*(i//8)]+B3[48+(i%8)+64*(i//8)]+B3[56+(i%8)+64*(i//8)])-\
                                    (A4[(i%8)*8+64*(i//8)]+A4[(i%8)*8+64*(i//8)+1]+A4[(i%8)*8+64*(i//8)+2]+A4[(i%8)*8+64*(i//8)+3]+A4[(i%8)*8+64*(i//8)+4]+A4[(i%8)*8+64*(i//8)+5]+A4[(i%8)*8+64*(i//8)+6]+A4[(i%8)*8+64*(i//8)+7]+B4[(i%8)*8+64*(i//8)]+B4[(i%8)*8+64*(i//8)+1]+B4[(i%8)*8+64*(i//8)+2]+B4[(i%8)*8+64*(i//8)+3]+B4[(i%8)*8+64*(i//8)+4]+B4[(i%8)*8+64*(i//8)+5]+B4[(i%8)*8+64*(i//8)+6]+B4[(i%8)*8+64*(i//8)+7])+\
                                        (A4[(i%8)+64*(i//8)]+A4[8+(i%8)+64*(i//8)]+A4[16+(i%8)+64*(i//8)]+A4[24+(i%8)+64*(i//8)]+A4[32+(i%8)+64*(i//8)]+A4[40+(i%8)+64*(i//8)]+A4[48+(i%8)+64*(i//8)]+A4[56+(i%8)+64*(i//8)]+B4[i]+B4[8+(i%8)+64*(i//8)]+B4[16+(i%8)+64*(i//8)]+B4[24+(i%8)+64*(i//8)]+B4[32+(i%8)+64*(i//8)]+B4[40+(i%8)+64*(i//8)]+B4[48+(i%8)+64*(i//8)]+B4[56+(i%8)+64*(i//8)]) for i in range(8*20)), 'e5')



for i in range(64*20):
    if(i==0):
        goal=(A0[0]+A1[0]+A2[0]+A3[0]+A4[0]+A5[0])*(baselen[0][0]*dis_income+IDL[0][0]*time_income)-(B0[0]+B1[0]+B2[0]+B3[0]+B4[0]+B5[0])*baselen[0][0]*empty_cost
    else:
        goal=goal+(A0[i]+A1[i]+A2[i]+A3[i]+A4[i]+A5[i])*(baselen[(i%64)//8][i%8]*dis_income+IDL[(i%64)//8][i%8]*time_income)-(B0[i]+B1[i]+B2[i]+B3[i]+B4[i]+B5[i])*baselen[(i%64)//8][i%8]*empty_cost

m.setObjective(goal, GRB.MAXIMIZE)
m.optimize()

for v in m.getVars():
    if('B' in v.varName and int(v.x)!=0):
        print('%s %g' % (v.varName, v.x))
    elif(('a' in v.varName or 'b' in v.varName or 's' in v.varName) and float(v.x)!=0.0):
        print('%s %g' % (v.varName, v.x))
    
    #print('%s %g' % (v.varName, v.x))
print('training ending.............................................................')

print(m.objVal)
for v in m.getVars():
    if('a' in v.varName):
        a_p.append(float(v.x))
    elif('b0' in v.varName):
        b0_p.append(float(v.x))
    elif('b1' in v.varName):
        b1_p.append(float(v.x))
    elif('b2' in v.varName):
        b2_p.append(float(v.x))
    elif('b3' in v.varName):
        b3_p.append(float(v.x))
    elif('b4' in v.varName):
        b4_p.append(float(v.x))
    elif('b5' in v.varName):
        b5_p.append(float(v.x))
    elif('t0' in v.varName):
        t0_p.append(float(v.x))
    elif('t1' in v.varName):
        t1_p.append(float(v.x))
    elif('t2' in v.varName):
        t2_p.append(float(v.x))
    elif('t3' in v.varName):
        t3_p.append(float(v.x))
    elif('t4' in v.varName):
        t4_p.append(float(v.x))
    elif('t5' in v.varName):
        t5_p.append(float(v.x))
    elif('s' in v.varName):
        s_p.append(float(v.x))

'''
test
'''
for n in range(10): 
    #dlist=dlist_train[m]    #出行需求 8*8*7
    #xinlist=xinlist_train[m]    #初始分布 8

    # Model formulation
    m = gb.Model('test'+str(n))
    A0 = m.addVars(64, lb=0, vtype=GRB.INTEGER, name='A0')  #时段1的运载数
    A1 = m.addVars(64, lb=0, vtype=GRB.INTEGER, name='A1')
    A2 = m.addVars(64, lb=0, vtype=GRB.INTEGER, name='A2')
    A3 = m.addVars(64, lb=0, vtype=GRB.INTEGER, name='A3')
    A4 = m.addVars(64, lb=0, vtype=GRB.INTEGER, name='A4')
    A5 = m.addVars(64, lb=0, vtype=GRB.INTEGER, name='A5')

    B0 = m.addVars(64, lb=0, vtype=GRB.INTEGER, name='B0')  #时段1的调度数
    B1 = m.addVars(64, lb=0, vtype=GRB.INTEGER, name='B1')
    B2 = m.addVars(64, lb=0, vtype=GRB.INTEGER, name='B2')
    B3 = m.addVars(64, lb=0, vtype=GRB.INTEGER, name='B3')
    B4 = m.addVars(64, lb=0, vtype=GRB.INTEGER, name='B4')
    B5 = m.addVars(64, lb=0, vtype=GRB.INTEGER, name='B5')

    #运载数小于需求量
    m.addConstrs((A0[i] <= dlist_test[n][i//8][i%8][1] for i in range(64)), 'cc1')
    m.addConstrs((A1[i] <= dlist_test[n][i//8][i%8][2] for i in range(64)), 'cc2')
    m.addConstrs((A2[i] <= dlist_test[n][i//8][i%8][3] for i in range(64)), 'cc3')
    m.addConstrs((A3[i] <= dlist_test[n][i//8][i%8][4] for i in range(64)), 'cc4')
    m.addConstrs((A4[i] <= dlist_test[n][i//8][i%8][5] for i in range(64)), 'cc5')
    m.addConstrs((A5[i] <= dlist_test[n][i//8][i%8][6] for i in range(64)), 'cc6')
    
    #B的取整
    m.addConstrs((B0[i] <= a_p[i]+b0_p[i]*dlist_test[n][i//8][i%8][0]-t0_p[i]*dlist_test[n][i%8][i//8][0]+0.5 for i in range(64)), 'c1')#+s_p[i]*(sum_test[n]-xinlist_test[n][i//8])
    m.addConstrs((B1[i] <= a_p[i]+b1_p[i]*dlist_test[n][i//8][i%8][1]-t1_p[i]*dlist_test[n][i%8][i//8][1]+0.5 for i in range(64)), 'c2')
    m.addConstrs((B2[i] <= a_p[i]+b2_p[i]*dlist_test[n][i//8][i%8][2]-t2_p[i]*dlist_test[n][i%8][i//8][2]+0.5 for i in range(64)), 'c3')
    m.addConstrs((B3[i] <= a_p[i]+b3_p[i]*dlist_test[n][i//8][i%8][3]-t3_p[i]*dlist_test[n][i%8][i//8][3]+0.5 for i in range(64)), 'c4')
    m.addConstrs((B4[i] <= a_p[i]+b4_p[i]*dlist_test[n][i//8][i%8][4]-t4_p[i]*dlist_test[n][i%8][i//8][4]+0.5 for i in range(64)), 'c5')
    m.addConstrs((B5[i] <= a_p[i]+b5_p[i]*dlist_test[n][i//8][i%8][5]-t5_p[i]*dlist_test[n][i%8][i//8][5]+0.5 for i in range(64)), 'c6')
    m.addConstrs((B0[i] >= a_p[i]+b0_p[i]*dlist_test[n][i//8][i%8][0]-t0_p[i]*dlist_test[n][i%8][i//8][0]-0.5+1e-4 for i in range(64)), 'c7')#+s_p[i]*(sum_test[n]-xinlist_test[n][i//8])
    m.addConstrs((B1[i] >= a_p[i]+b1_p[i]*dlist_test[n][i//8][i%8][1]-t1_p[i]*dlist_test[n][i%8][i//8][1]-0.5+1e-4 for i in range(64)), 'c8')
    m.addConstrs((B2[i] >= a_p[i]+b2_p[i]*dlist_test[n][i//8][i%8][2]-t2_p[i]*dlist_test[n][i%8][i//8][2]-0.5+1e-4 for i in range(64)), 'c9')
    m.addConstrs((B3[i] >= a_p[i]+b3_p[i]*dlist_test[n][i//8][i%8][3]-t3_p[i]*dlist_test[n][i%8][i//8][3]-0.5+1e-4 for i in range(64)), 'c10')
    m.addConstrs((B4[i] >= a_p[i]+b4_p[i]*dlist_test[n][i//8][i%8][4]-t4_p[i]*dlist_test[n][i%8][i//8][4]-0.5+1e-4 for i in range(64)), 'c11')
    m.addConstrs((B5[i] >= a_p[i]+b5_p[i]*dlist_test[n][i//8][i%8][5]-t5_p[i]*dlist_test[n][i%8][i//8][5]-0.5+1e-4 for i in range(64)), 'c12')
    
    #拒绝自我调度
    m.addConstrs((A0[i*8+i] == 0 for i in range(8)), 'd1')
    m.addConstrs((A1[i*8+i] == 0 for i in range(8)), 'd2')
    m.addConstrs((A2[i*8+i] == 0 for i in range(8)), 'd3')
    m.addConstrs((A3[i*8+i] == 0 for i in range(8)), 'd4')
    m.addConstrs((A4[i*8+i] == 0 for i in range(8)), 'd5')
    m.addConstrs((A5[i*8+i] == 0 for i in range(8)), 'd6')
    m.addConstrs((B0[i*8+i] == 0 for i in range(8)), 'd7')
    m.addConstrs((B1[i*8+i] == 0 for i in range(8)), 'd8')
    m.addConstrs((B2[i*8+i] == 0 for i in range(8)), 'd9')
    m.addConstrs((B3[i*8+i] == 0 for i in range(8)), 'd10')
    m.addConstrs((B4[i*8+i] == 0 for i in range(8)), 'd11')
    m.addConstrs((B5[i*8+i] == 0 for i in range(8)), 'd12')

    #车辆数目限制
    m.addConstrs((A0[i*8]+A0[i*8+1]+A0[i*8+2]+A0[i*8+3]+A0[i*8+4]+A0[i*8+5]+A0[i*8+6]+A0[i*8+7]+B0[i*8]+B0[i*8+1]+B0[i*8+2]+B0[i*8+3]+B0[i*8+4]+B0[i*8+5]+B0[i*8+6]+B0[i*8+7] <= xinlist_test[n][i] for i in range(8)), 'e0')
    m.addConstrs((A1[i*8]+A1[i*8+1]+A1[i*8+2]+A1[i*8+3]+A1[i*8+4]+A1[i*8+5]+A1[i*8+6]+A1[i*8+7]+B1[i*8]+B1[i*8+1]+B1[i*8+2]+B1[i*8+3]+B1[i*8+4]+B1[i*8+5]+B1[i*8+6]+B1[i*8+7] <= xinlist_test[n][i]-(A0[i*8]+A0[i*8+1]+A0[i*8+2]+A0[i*8+3]+A0[i*8+4]+A0[i*8+5]+A0[i*8+6]+A0[i*8+7]+B0[i*8]+B0[i*8+1]+B0[i*8+2]+B0[i*8+3]+B0[i*8+4]+B0[i*8+5]+B0[i*8+6]+B0[i*8+7])+(A0[i]+A0[8+i]+A0[16+i]+A0[24+i]+A0[32+i]+A0[40+i]+A0[48+i]+A0[56+i]+B0[i]+B0[8+i]+B0[16+i]+B0[24+i]+B0[32+i]+B0[40+i]+B0[48+i]+B0[56+i]) for i in range(8)), 'e1')
    m.addConstrs((A2[i*8]+A2[i*8+1]+A2[i*8+2]+A2[i*8+3]+A2[i*8+4]+A2[i*8+5]+A2[i*8+6]+A2[i*8+7]+B2[i*8]+B2[i*8+1]+B2[i*8+2]+B2[i*8+3]+B2[i*8+4]+B2[i*8+5]+B2[i*8+6]+B2[i*8+7] <= xinlist_test[n][i]-(A0[i*8]+A0[i*8+1]+A0[i*8+2]+A0[i*8+3]+A0[i*8+4]+A0[i*8+5]+A0[i*8+6]+A0[i*8+7]+B0[i*8]+B0[i*8+1]+B0[i*8+2]+B0[i*8+3]+B0[i*8+4]+B0[i*8+5]+B0[i*8+6]+B0[i*8+7])+(A0[i]+A0[8+i]+A0[16+i]+A0[24+i]+A0[32+i]+A0[40+i]+A0[48+i]+A0[56+i]+B0[i]+B0[8+i]+B0[16+i]+B0[24+i]+B0[32+i]+B0[40+i]+B0[48+i]+B0[56+i])-(A1[i*8]+A1[i*8+1]+A1[i*8+2]+A1[i*8+3]+A1[i*8+4]+A1[i*8+5]+A1[i*8+6]+A1[i*8+7]+B1[i*8]+B1[i*8+1]+B1[i*8+2]+B1[i*8+3]+B1[i*8+4]+B1[i*8+5]+B1[i*8+6]+B1[i*8+7])+(A1[i]+A1[8+i]+A1[16+i]+A1[24+i]+A1[32+i]+A1[40+i]+A1[48+i]+A1[56+i]+B1[i]+B1[8+i]+B1[16+i]+B1[24+i]+B1[32+i]+B1[40+i]+B1[48+i]+B1[56+i]) for i in range(8)), 'e2')
    m.addConstrs((A3[i*8]+A3[i*8+1]+A3[i*8+2]+A3[i*8+3]+A3[i*8+4]+A3[i*8+5]+A3[i*8+6]+A3[i*8+7]+B3[i*8]+B3[i*8+1]+B3[i*8+2]+B3[i*8+3]+B3[i*8+4]+B3[i*8+5]+B3[i*8+6]+B3[i*8+7] <= xinlist_test[n][i]-(A0[i*8]+A0[i*8+1]+A0[i*8+2]+A0[i*8+3]+A0[i*8+4]+A0[i*8+5]+A0[i*8+6]+A0[i*8+7]+B0[i*8]+B0[i*8+1]+B0[i*8+2]+B0[i*8+3]+B0[i*8+4]+B0[i*8+5]+B0[i*8+6]+B0[i*8+7])+(A0[i]+A0[8+i]+A0[16+i]+A0[24+i]+A0[32+i]+A0[40+i]+A0[48+i]+A0[56+i]+B0[i]+B0[8+i]+B0[16+i]+B0[24+i]+B0[32+i]+B0[40+i]+B0[48+i]+B0[56+i])-(A1[i*8]+A1[i*8+1]+A1[i*8+2]+A1[i*8+3]+A1[i*8+4]+A1[i*8+5]+A1[i*8+6]+A1[i*8+7]+B1[i*8]+B1[i*8+1]+B1[i*8+2]+B1[i*8+3]+B1[i*8+4]+B1[i*8+5]+B1[i*8+6]+B1[i*8+7])+(A1[i]+A1[8+i]+A1[16+i]+A1[24+i]+A1[32+i]+A1[40+i]+A1[48+i]+A1[56+i]+B1[i]+B1[8+i]+B1[16+i]+B1[24+i]+B1[32+i]+B1[40+i]+B1[48+i]+B1[56+i])-(A2[i*8]+A2[i*8+1]+A2[i*8+2]+A2[i*8+3]+A2[i*8+4]+A2[i*8+5]+A2[i*8+6]+A2[i*8+7]+B2[i*8]+B2[i*8+1]+B2[i*8+2]+B2[i*8+3]+B2[i*8+4]+B2[i*8+5]+B2[i*8+6]+B2[i*8+7])+(A2[i]+A2[8+i]+A2[16+i]+A2[24+i]+A2[32+i]+A2[40+i]+A2[48+i]+A2[56+i]+B2[i]+B2[8+i]+B2[16+i]+B2[24+i]+B2[32+i]+B2[40+i]+B2[48+i]+B2[56+i]) for i in range(8)), 'e3')
    m.addConstrs((A4[i*8]+A4[i*8+1]+A4[i*8+2]+A4[i*8+3]+A4[i*8+4]+A4[i*8+5]+A4[i*8+6]+A4[i*8+7]+B4[i*8]+B4[i*8+1]+B4[i*8+2]+B4[i*8+3]+B4[i*8+4]+B4[i*8+5]+B4[i*8+6]+B4[i*8+7] <= xinlist_test[n][i]-(A0[i*8]+A0[i*8+1]+A0[i*8+2]+A0[i*8+3]+A0[i*8+4]+A0[i*8+5]+A0[i*8+6]+A0[i*8+7]+B0[i*8]+B0[i*8+1]+B0[i*8+2]+B0[i*8+3]+B0[i*8+4]+B0[i*8+5]+B0[i*8+6]+B0[i*8+7])+(A0[i]+A0[8+i]+A0[16+i]+A0[24+i]+A0[32+i]+A0[40+i]+A0[48+i]+A0[56+i]+B0[i]+B0[8+i]+B0[16+i]+B0[24+i]+B0[32+i]+B0[40+i]+B0[48+i]+B0[56+i])-(A1[i*8]+A1[i*8+1]+A1[i*8+2]+A1[i*8+3]+A1[i*8+4]+A1[i*8+5]+A1[i*8+6]+A1[i*8+7]+B1[i*8]+B1[i*8+1]+B1[i*8+2]+B1[i*8+3]+B1[i*8+4]+B1[i*8+5]+B1[i*8+6]+B1[i*8+7])+(A1[i]+A1[8+i]+A1[16+i]+A1[24+i]+A1[32+i]+A1[40+i]+A1[48+i]+A1[56+i]+B1[i]+B1[8+i]+B1[16+i]+B1[24+i]+B1[32+i]+B1[40+i]+B1[48+i]+B1[56+i])-(A2[i*8]+A2[i*8+1]+A2[i*8+2]+A2[i*8+3]+A2[i*8+4]+A2[i*8+5]+A2[i*8+6]+A2[i*8+7]+B2[i*8]+B2[i*8+1]+B2[i*8+2]+B2[i*8+3]+B2[i*8+4]+B2[i*8+5]+B2[i*8+6]+B2[i*8+7])+(A2[i]+A2[8+i]+A2[16+i]+A2[24+i]+A2[32+i]+A2[40+i]+A2[48+i]+A2[56+i]+B2[i]+B2[8+i]+B2[16+i]+B2[24+i]+B2[32+i]+B2[40+i]+B2[48+i]+B2[56+i])-(A3[i*8]+A3[i*8+1]+A3[i*8+2]+A3[i*8+3]+A3[i*8+4]+A3[i*8+5]+A3[i*8+6]+A3[i*8+7]+B3[i*8]+B3[i*8+1]+B3[i*8+2]+B3[i*8+3]+B3[i*8+4]+B3[i*8+5]+B3[i*8+6]+B3[i*8+7])+(A3[i]+A3[8+i]+A3[16+i]+A3[24+i]+A3[32+i]+A3[40+i]+A3[48+i]+A3[56+i]+B3[i]+B3[8+i]+B3[16+i]+B3[24+i]+B3[32+i]+B3[40+i]+B3[48+i]+B3[56+i]) for i in range(8)), 'e4')
    m.addConstrs((A5[i*8]+A5[i*8+1]+A5[i*8+2]+A5[i*8+3]+A5[i*8+4]+A5[i*8+5]+A5[i*8+6]+A5[i*8+7]+B5[i*8]+B5[i*8+1]+B5[i*8+2]+B5[i*8+3]+B5[i*8+4]+B5[i*8+5]+B5[i*8+6]+B5[i*8+7] <= xinlist_test[n][i]-(A0[i*8]+A0[i*8+1]+A0[i*8+2]+A0[i*8+3]+A0[i*8+4]+A0[i*8+5]+A0[i*8+6]+A0[i*8+7]+B0[i*8]+B0[i*8+1]+B0[i*8+2]+B0[i*8+3]+B0[i*8+4]+B0[i*8+5]+B0[i*8+6]+B0[i*8+7])+(A0[i]+A0[8+i]+A0[16+i]+A0[24+i]+A0[32+i]+A0[40+i]+A0[48+i]+A0[56+i]+B0[i]+B0[8+i]+B0[16+i]+B0[24+i]+B0[32+i]+B0[40+i]+B0[48+i]+B0[56+i])-(A1[i*8]+A1[i*8+1]+A1[i*8+2]+A1[i*8+3]+A1[i*8+4]+A1[i*8+5]+A1[i*8+6]+A1[i*8+7]+B1[i*8]+B1[i*8+1]+B1[i*8+2]+B1[i*8+3]+B1[i*8+4]+B1[i*8+5]+B1[i*8+6]+B1[i*8+7])+(A1[i]+A1[8+i]+A1[16+i]+A1[24+i]+A1[32+i]+A1[40+i]+A1[48+i]+A1[56+i]+B1[i]+B1[8+i]+B1[16+i]+B1[24+i]+B1[32+i]+B1[40+i]+B1[48+i]+B1[56+i])-(A2[i*8]+A2[i*8+1]+A2[i*8+2]+A2[i*8+3]+A2[i*8+4]+A2[i*8+5]+A2[i*8+6]+A2[i*8+7]+B2[i*8]+B2[i*8+1]+B2[i*8+2]+B2[i*8+3]+B2[i*8+4]+B2[i*8+5]+B2[i*8+6]+B2[i*8+7])+(A2[i]+A2[8+i]+A2[16+i]+A2[24+i]+A2[32+i]+A2[40+i]+A2[48+i]+A2[56+i]+B2[i]+B2[8+i]+B2[16+i]+B2[24+i]+B2[32+i]+B2[40+i]+B2[48+i]+B2[56+i])-(A3[i*8]+A3[i*8+1]+A3[i*8+2]+A3[i*8+3]+A3[i*8+4]+A3[i*8+5]+A3[i*8+6]+A3[i*8+7]+B3[i*8]+B3[i*8+1]+B3[i*8+2]+B3[i*8+3]+B3[i*8+4]+B3[i*8+5]+B3[i*8+6]+B3[i*8+7])+(A3[i]+A3[8+i]+A3[16+i]+A3[24+i]+A3[32+i]+A3[40+i]+A3[48+i]+A3[56+i]+B3[i]+B3[8+i]+B3[16+i]+B3[24+i]+B3[32+i]+B3[40+i]+B3[48+i]+B3[56+i])-(A4[i*8]+A4[i*8+1]+A4[i*8+2]+A4[i*8+3]+A4[i*8+4]+A4[i*8+5]+A4[i*8+6]+A4[i*8+7]+B4[i*8]+B4[i*8+1]+B4[i*8+2]+B4[i*8+3]+B4[i*8+4]+B4[i*8+5]+B4[i*8+6]+B4[i*8+7])+(A4[i]+A4[8+i]+A4[16+i]+A4[24+i]+A4[32+i]+A4[40+i]+A4[48+i]+A4[56+i]+B4[i]+B4[8+i]+B4[16+i]+B4[24+i]+B4[32+i]+B4[40+i]+B4[48+i]+B4[56+i]) for i in range(8)), 'e5')

    for i in range(64):
        if(i==0):
            goal=(A0[0]+A1[0]+A2[0]+A3[0]+A4[0]+A5[0])*(baselen[0][0]*dis_income+IDL[0][0]*time_income)-(B0[0]+B1[0]+B2[0]+B3[0]+B4[0]+B5[0])*baselen[0][0]*empty_cost
        else:
            goal=goal+(A0[i]+A1[i]+A2[i]+A3[i]+A4[i]+A5[i])*(baselen[i//8][i%8]*dis_income+IDL[i//8][i%8]*time_income)-(B0[i]+B1[i]+B2[i]+B3[i]+B4[i]+B5[i])*baselen[i//8][i%8]*empty_cost

    m.setObjective(goal, GRB.MAXIMIZE)
    m.optimize()
    for v in m.getVars():
        if('B' in v.varName):
            if(int(v.x)!=0):
                print('%s %g' % (v.varName, v.x))
        #print('%s %g' % (v.varName, v.x))
    sum+=float(m.objVal)
    print('ending.............................................................')
print(sum)